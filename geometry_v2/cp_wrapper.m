function CP=cp_wrapper(filename, isDiscrete, test, Crit)% % CP=cp_wrapper(filename,isDiscrete, test, Crit)% cp wrapper is used to combine the relevant functions for the changepoint% algorithim into a single easy-to-use function. It returns an array giving% the coordinates of the significant change points in the cumulative% record. It graphs the cumulative record, with the change points% indicated, and below that the slopes between the change points%% The first argument (the name of the file or variable containing the data) % is obligatory; it must be specified when the function is called.% if the remaining three arguments are not supplied when the function is called,% the user will be prompted for them. % If the first argument is a file to read data from, put single quotes around it.% The file must be a tab-delimited ASCII file,% with one datum per line, and with the .txt extension. If the first% argument is a variable in a Matlab workspace, it must be a column vector. In% either case, the data should be in uncumulated form (trial-by-trial% measurements, or successive interevent intervals).%% Valid parameter values:%   isDiscrete: 0 or 1%     1 for discrete-trial data and 0 for successive real-valued intervals%       (e.g., the intervals between successive events or the distances%       between successive landmarks)%   test: 1, 2, 3 or 4%     1 for binomial (random rate) - must be integer-valued when used in%        discrete-trials case%     2 for Kolmogorov-Smirnov (real- or integer-valued data, although%        technically only valid for real-valued variables)%     3 for t test (either integer- or real-valued data)%     4 for chisquare test (must be binary data - 0 or 1 in each row)% %   Crit: A critical value use to test the significance of a given change point%    Values should generally be in the range between 1.3, which corresponds to%    a p value of .05 and 6, which corresponds to a p value of .000001if nargin<2    isDiscrete=input('Are these discrete-trial measurements? (1 if yes; 0 if no) ');    test=input('What test should be used to compare data before and after a putative change point? \n (Answer 1 for binomial, 2 for K-S, 3 for t test or 4 for chi square) ');    Crit=input('Logit value (decision criterion between 1.3 and 6)? ');end%setupif ischar(filename)    Data  = load(filename);else    Data=filename;end% consistency checksif (isDiscrete==0)&(test==4)    disp('Cannot use chi square test when data are successive intervals')    returnendif (test==4)&(sum(Data+~Data)~=length(Data))    disp('When chi square test is used, data must be binary, i.e. 0 or 1')    returnendif (isDiscrete==1)&(test==1)&(~isequal(mod(Data,ones(size(Data))),zeros(size(Data))))    disp('When the binomial test is used with discrete-trial data, the data must be integer valued')    returnendCum=cumsum(Data); % the cumulative record% Section for computing CP array when binomial (random rate) test is used% or when chi square test is usedif (test==1)|(test==4)       Cumt=Cum; % Initializiing for while loop. The Cumt vector will    % be truncated as change points are found        if test==1 % if binomial test is to be used        CritLength=1; % When binomial test is used, there must be at least two data    else        CritLength=7; % A test of differences of frequency cannot be significant when        % the total number of observations is less than 8    end    CP=[0 0]; r=1; % Initializing for while loop        while (~isempty(r)&(length(Cumt)>CritLength))        if (isDiscrete==0) % Data are continuous            R=cpc(Cumt); % putative inflection points            L=rrc(Cumt,R); % logit vector for continuous case                    else % data are discrete            R=cpd(Cumt); % putative inflection points            if test==1 % if binomial test is to be used                L=rrd(Cumt,R); % logit vector            else % if chisquare test is to be used                [L]=chi2logit(Cumt,R);            end  % of computing logit vector in discrete case        end  % of computing R & L for one pass              [Cumt,Lt,r]=trun(Cumt,R,L,Crit); %Cumt is the truncated cumulative             % record; Lt is the logit vector up to the point of             % truncation (not used); r is the change point; r is empty if there is             % no significant change point                 if (~isempty(r)) % if there is a change point, update change-point array             if isDiscrete==0 %In the continuous case, the row count goes in the                % y-column of the output array (the event count); in all other cases, it goes                % in the x column. In the continuous case, the x column                % contains the successive event times                CP(end+1,2)=CP(end,2)+r; % Add Cumt row for latest change point                % to last change point to get Cum row of latest change                % point.                 CP(end,1)=Cum(CP(end,2)); % Value of cumulative record at the                % change point            else % In the discrete case, the row data go in the first column of CP                     CP(end+1,1)=CP(end,1)+r; % Add Cumt row for latest change point                % to last change point to get Cum row of latest change point                CP(end,2)=Cum(CP(end,1)); % Value of cumulative record at the                % change point            end        end % of updating change-point array              end % of while loop for finding successive change points when the binomial test is used      end % of section that computes change-point array when binomial or chi square test is used  % Section for computing change-point array when K-S or t- test is used if (test==2)|(test==3)         NewData=Data; % Initializing for while loop. These vectors will        % be truncated as change points are found    CP=[0 0]; r=1; % Initializing for while loop        if test==2        CritLength=7; % K-S test is not valid when there        % are fewer than 4 data in either of the two samples    else        CritLength=2; % when t test is used there must be at least 3 data    end        while (~isempty(r))&(length(NewData)>CritLength)                NewCum=cumsum(NewData);             if (isDiscrete==0) % Data are continuous            R=cpc(NewCum);        else % Data are discrete            R=cpd(NewCum);        end % computing R                if test==2 % if K-S test is to be used            [r]=ks(NewData,R,Crit); % r is the (significant) change point; if                % there is none, it's empty        else % if t test is to be used            [r] = cpt(NewData,R,Crit);        end % of computing new change point        if ~isempty(r) % if there is a new change point, update change-point array         % and truncate NewData                         CP(end+1,1)=CP(end,1)+r; % Add Cumt row for latest change point                % to last change point to get Cum row of latest change                % point            CP(end,2)=Cum(CP(end,1)); % Value of cumulative record at the                % change point            NewData=NewData(r+1:end); % Truncated data vector                     end % of updating change-point array & truncating            end % of while loop for computing CP array when K-S or t test are used    end % of section that computes CP array when K-S or t test are used% Adding final point to output arrayif isDiscrete==1         CP(end+1,1)=length(Cum); CP(end,2)=Cum(CP(end,1)); % last row of CP array     % gives coordinates of final point in cumulative record else % in continuous case, row count goes in y column     CP(end+1,2)=length(Cum); CP(end,1)=Cum(CP(end,2)); end % of adding final point% Computing SlopesS=slopes(CP);%Plottingfiguresubplot(2,1,1)if isDiscrete==0      PlotArray=ystep(Cum); % 2-column array for plotting cumulative recordelse    PlotArray=xstep(Cum);end    plot(PlotArray(:,1),PlotArray(:,2),'k'); % cumulative recordhold onplot(CP(:,1),CP(:,2),'ko') % change points superposedif isDiscrete==0    xlabel('Time');ylabel('Number of Events')else    xlabel('Trials');ylabel('Cumulative response measure')endsubplot(2,1,2)plot(S(:,1),S(:,2),'k')if isDiscrete==0    xlabel('Time');ylabel('Average Rate = Events/(Unit Time)')else    xlabel('Trials');ylabel('Average Response per Trial')end